"use strict";(self.webpackChunkcortisol=self.webpackChunkcortisol||[]).push([[358],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?i.createElement(f,a(a({ref:t},p),{},{components:n})):i.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3002:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={title:"Writing a cortisolfile",sidebar_position:3},a=void 0,l={unversionedId:"writing-a-cortisolfile",id:"writing-a-cortisolfile",title:"Writing a cortisolfile",description:"Writing a cortisolfile",source:"@site/docs/writing-a-cortisolfile.md",sourceDirName:".",slug:"/writing-a-cortisolfile",permalink:"/writing-a-cortisolfile",draft:!1,editUrl:"https://github.com/CortisolAI/cortisol/docs/docs/writing-a-cortisolfile.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Writing a cortisolfile",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/getting-started"},next:{title:"Configuration",permalink:"/configuration"}},s={},c=[{value:"Writing a cortisolfile",id:"writing-a-cortisolfile",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"writing-a-cortisolfile"},"Writing a cortisolfile"),(0,r.kt)("p",null,"Cortisol has been inspired by ",(0,r.kt)("a",{parentName:"p",href:"https://docs.locust.io/en/stable/writing-a-locustfile.html"},"Locust")," on defining the behaviour of users."),(0,r.kt)("p",null,"In fact, there is only one difference between a cortisol file and a locust file. The user defined class in the cortisol file must extend the ",(0,r.kt)("inlineCode",{parentName:"p"},"CortisolHttpUser"),". The rest is exactly the same."),(0,r.kt)("p",null,"Let's look at a realistic example that is slightly modified from the original ",(0,r.kt)("a",{parentName:"p",href:"https://docs.locust.io/en/stable/writing-a-locustfile.html"},"Locust example"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    import time\n    from cortisol.cortisollib.users import CortisolHttpUser\n    from locust import task, between\n\n    class QuickstartUser(CortisolHttpUser):\n        wait_time = between(1, 5)\n\n        @task\n        def hello_world(self):\n            self.client.get("/hello")\n            self.client.get("/world")\n\n        @task(3)\n        def view_items(self):\n            for item_id in range(10):\n                self.client.get(f"/item?id={item_id}", name="/item")\n                time.sleep(1)\n\n        def on_start(self):\n            self.client.post("/login", json={"username":"foo", "password":"bar"})\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Let's break it down")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    import time\n    from cortisol.cortisollib.users import CortisolHttpUser\n    from locust import task, between\n")),(0,r.kt)("p",null,"A cortisol file is just a normal Python module, it can import code from other files or packages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    class QuickstartUser(CortisolHttpUser):\n")),(0,r.kt)("p",null,"Here we define a class for the users that we will be simulating. It inherits from\n",(0,r.kt)("inlineCode",{parentName:"p"},"CortisolHttpUser <cortisollib.users.CortisolHttpUser>")," which gives each user a ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," attribute,\nwhich is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpSession <locust.clients.HttpSession>")," behind the scenes, that\ncan be used to make HTTP requests to the target system that we want to load test. When a test starts,\nlocust will create an instance of this class for every user that it simulates, and each of these\nusers will start running within their own green gevent thread."),(0,r.kt)("p",null,"For a file to be a valid cortisolfile it must contain at least one class inheriting from :py:class:",(0,r.kt)("inlineCode",{parentName:"p"},"CortisolHttpUser <cortisollib.users.CortisolHttpUser>"),"."),(0,r.kt)("p",null,"Behind the scenes, the class ",(0,r.kt)("inlineCode",{parentName:"p"},"CortisolHttpUser <cortisollib.users.CortisolHttpUser>")," has extended the ",(0,r.kt)("inlineCode",{parentName:"p"},"User <locust.User>")," so that it can read and process the logs that are written during the load test that happen in the background."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    wait_time = between(1, 5)\n")),(0,r.kt)("p",null,"Our class defines a ",(0,r.kt)("inlineCode",{parentName:"p"},"wait_time")," that will make the simulated users wait between 1 and 5 seconds after each task (see below)\nis executed. For more info see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.locust.io/en/stable/writing-a-locustfile.html#wait-time"},"wait-time"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    @task\n    def hello_world(self):\n        ...\n")),(0,r.kt)("p",null,"Methods decorated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@task")," are the core of your cortisol file. For every running user,\nLocust creates a greenlet (micro-thread), that will call those methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    @task\n    def hello_world(self):\n        self.client.get("/hello")\n        self.client.get("/world")\n\n    @task(3)\n    def view_items(self):\n    ...\n')),(0,r.kt)("p",null,"We've declared two tasks by decorating two methods with ",(0,r.kt)("inlineCode",{parentName:"p"},"@task"),", one of which has been given a higher weight (3).\nWhen our ",(0,r.kt)("inlineCode",{parentName:"p"},"QuickstartUser")," runs it'll pick one of the declared tasks - in this case either ",(0,r.kt)("inlineCode",{parentName:"p"},"hello_world")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"view_items")," - and execute it. Tasks are picked at random, but you can give them different weighting. The above\nconfiguration will make Locust three times more likely to pick ",(0,r.kt)("inlineCode",{parentName:"p"},"view_items")," than ",(0,r.kt)("inlineCode",{parentName:"p"},"hello_world"),". When a task has\nfinished executing, the User will then sleep during its wait time (in this case between 1 and 5 seconds).\nAfter its wait time it'll pick a new task and keep repeating that."),(0,r.kt)("p",null,"Note that only methods decorated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@task")," will be picked, so you can define your own internal helper methods any way you like."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    self.client.get("/hello")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    @task(3)\n    def view_items(self):\n        for item_id in range(10):\n            self.client.get(f"/item?id={item_id}", name="/item")\n            time.sleep(1)\n')),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"view_items")," task we load 10 different URLs by using a variable query parameter."))}d.isMDXComponent=!0}}]);